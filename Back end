// backend/server.js
import express from "express";
import bodyParser from "body-parser";
import cors from "cors";

const app = express();
const PORT = 5000;

app.use(cors());
app.use(bodyParser.json());

// In-memory tasks (use DB in production)
let tasks = [];
let idCounter = 1;

// âœ… CREATE Task
app.post("/tasks", (req, res) => {
  const { title, description, status } = req.body;
  if (!title) return res.status(400).json({ error: "Title is required" });

  const newTask = {
    id: idCounter++,
    title,
    description: description || "",
    status: status || "pending",
  };
  tasks.push(newTask);
  res.status(201).json(newTask);
});

// âœ… READ all tasks (with search & filter)
app.get("/tasks", (req, res) => {
  const { search, status } = req.query;
  let filtered = tasks;

  if (search) {
    const keyword = search.toLowerCase();
    filtered = filtered.filter(
      (t) =>
        t.title.toLowerCase().includes(keyword) ||
        t.description.toLowerCase().includes(keyword)
    );
  }

  if (status) {
    filtered = filtered.filter((t) => t.status === status);
  }

  res.json(filtered);
});

// âœ… READ single task
app.get("/tasks/:id", (req, res) => {
  const task = tasks.find((t) => t.id === parseInt(req.params.id));
  if (!task) return res.status(404).json({ error: "Task not found" });
  res.json(task);
});

// âœ… UPDATE task
app.put("/tasks/:id", (req, res) => {
  const { title, description, status } = req.body;
  const task = tasks.find((t) => t.id === parseInt(req.params.id));

  if (!task) return res.status(404).json({ error: "Task not found" });

  if (title) task.title = title;
  if (description) task.description = description;
  if (status) task.status = status;

  res.json(task);
});

// âœ… DELETE task
app.delete("/tasks/:id", (req, res) => {
  tasks = tasks.filter((t) => t.id !== parseInt(req.params.id));
  res.json({ message: "Task deleted" });
});

app.listen(PORT, () => console.log(`ðŸš€ Server running on http://localhost:${PORT}`));
